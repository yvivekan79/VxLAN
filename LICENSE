# VxLAN Tunnel Management System - Project Documentation

## Overview

The VxLAN Tunnel Management System is a comprehensive network overlay management solution that enables creation and management of Virtual Extensible LAN (VxLAN) tunnels across distributed infrastructure. The system provides multiple interfaces including CLI, REST API, and agent-based orchestration for managing tunnel lifecycles, supporting various network topologies (point-to-point, hub-spoke, full-mesh, partial-mesh), and coordinating multi-node deployments.

## User Preferences

Preferred communication style: Simple, everyday language.
Project type: Standalone Python application (no platform dependencies)

## System Architecture

### Core Components

**VxLAN Manager (core.py)**: Central tunnel lifecycle management component that handles tunnel creation, validation, persistence, and low-level network operations. Uses dataclass-based tunnel configuration with built-in validation for VNI ranges and IP addresses.

**CLI Interface (cli.py)**: Click-based command-line interface providing comprehensive tunnel management commands including creation, deletion, listing, and status operations. Supports both JSON and YAML output formats.

**REST API (api.py & api_advanced.py)**: FastAPI-based web service offering RESTful endpoints for tunnel management. Includes both basic CRUD operations and advanced features like bulk operations, metrics collection, and orchestration capabilities. Uses Pydantic models for request/response validation.

**Orchestrator (orchestrator.py)**: Multi-node coordination system that manages tunnel deployment across distributed infrastructure. Supports both SSH and HTTP-based connections to remote nodes, enabling centralized management of complex network topologies.

**Agent (agent.py)**: Lightweight FastAPI service designed to run on remote nodes, providing local tunnel management capabilities and accepting commands from the orchestrator.

### Data Management

**Configuration Storage**: YAML-based configuration files for tunnel definitions, node configurations, and application settings. Default storage locations use relative paths (./config/, ./logs/) for portability.

**Database Schema (database.py)**: SQLAlchemy-based data models supporting both Node and Tunnel entities with proper relationships. Designed to support future database integration while currently using file-based storage.

**Logging System**: IPFIX-compliant structured logging with JSON output format, supporting both file and console output with configurable log levels.

### Network Topology Support

**Topology Manager (topology.py)**: Specialized component for creating and managing complex network topologies including hub-spoke, full-mesh, and partial-mesh configurations. Supports topology planning (dry-run) before actual deployment.

**Connection Methods**: Dual connection strategy supporting SSH-based connections for traditional infrastructure and HTTP API connections for modern deployments.

### Utility Framework

**Command Execution (utils.py)**: Centralized command execution framework with timeout handling, error management, and logging integration for system-level operations.

**Validation Framework**: Comprehensive input validation for VNI ranges (4096-16777215), IP addresses (IPv4/IPv6), and configuration parameters.

## External Dependencies

### Core Framework Dependencies
- **FastAPI**: REST API framework providing async support and automatic OpenAPI documentation
- **Click**: Command-line interface framework for CLI implementation
- **Pydantic**: Data validation and serialization for API models
- **SQLAlchemy**: Database ORM for data modeling (prepared for future database integration)
- **Uvicorn**: ASGI server for running FastAPI applications

### Network and System Integration
- **asyncssh**: Asynchronous SSH client for remote node communication
- **aiohttp**: Async HTTP client for API-based node communication
- **subprocess**: System command execution for tunnel management operations
- **ipaddress**: IP address validation and manipulation

### Configuration and Serialization
- **PyYAML**: YAML configuration file parsing and generation
- **JSON**: Native Python JSON support for structured data and logging

### System Integration
- **Pathlib**: Modern file system path handling
- **Linux Network Stack**: Direct integration with Linux networking commands (ip, bridge, etc.)
- **Systemd**: Service management integration for daemon operation

### Future Database Support
The system is architected to support database backends through SQLAlchemy models, with current file-based storage serving as the initial implementation. The database schema supports PostgreSQL, MySQL, and SQLite through SQLAlchemy's abstraction layer.

## Recent Changes (August 2025)

- **Platform Independence**: Removed all platform-specific dependencies and configurations
- **Path Updates**: Updated all file paths to use relative paths (./config, ./logs) for better portability
- **Documentation**: Created comprehensive README.md with installation and usage instructions
- **Examples**: Added example configuration files for different topology types (hub-spoke, full-mesh, partial-mesh)
- **Deployment**: Added DEPLOYMENT.md with production deployment guidelines including Docker, Kubernetes, and systemd configurations
- **Configuration**: Modified default API port to 8000 for standard deployment
- **Standalone Operation**: System now operates independently without any external platform dependencies

## File Structure

```
vxlan-management-system/
├── vxlan_manager/           # Core application package
│   ├── __init__.py
│   ├── core.py             # VxLAN tunnel management
│   ├── cli.py              # Command-line interface
│   ├── api.py              # REST API endpoints
│   ├── api_advanced.py     # Advanced API features
│   ├── orchestrator.py     # Multi-node coordination
│   ├── agent.py           # Remote agent service
│   ├── topology.py        # Topology management
│   ├── database.py        # Database models
│   ├── config.py          # Configuration management
│   ├── logger.py          # Logging system
│   └── utils.py           # Utility functions
├── config/                # Configuration files
│   ├── app_config.yaml    # Application configuration
│   └── tunnels.yaml       # Tunnel definitions
├── examples/              # Example configurations
│   ├── hub-spoke.yaml
│   ├── full-mesh.yaml
│   ├── partial-mesh.yaml
│   └── simple-tunnel.yaml
├── scripts/               # Installation and utility scripts
│   └── install.sh         # System installation script
├── systemd/               # Systemd service configuration
│   └── gind-vxlan.service
├── logs/                  # Log files
│   └── .gitkeep
├── main.py               # Main application entry point
├── README.md            # User documentation
├── DEPLOYMENT.md        # Deployment guide
└── PROJECT.md          # This project documentation
```

## Configuration Files

### Application Configuration (config/app_config.yaml)
- API port and logging settings
- Default values for tunnels
- Security and encryption settings
- System integration parameters

### Tunnel Configuration (config/tunnels.yaml)
- Persistent tunnel definitions
- Automatically managed by the system
- Supports backup and recovery

## Key Features Implemented

1. **Complete VxLAN Management**: Full lifecycle management of VxLAN tunnels with proper validation
2. **Multiple Interfaces**: Both CLI and REST API interfaces for different use cases
3. **Topology Support**: Hub-spoke, full-mesh, and partial-mesh network topologies
4. **Configuration Persistence**: YAML-based configuration with automatic backup
5. **Structured Logging**: IPFIX-compliant logging for audit and monitoring
6. **Idempotent Operations**: Safe tunnel creation and management operations
7. **System Recovery**: Automatic state recovery after system restarts
8. **Validation Framework**: Comprehensive input validation for all parameters
9. **Security Support**: Multiple encryption options and security configurations
10. **Production Ready**: Complete deployment guidelines and systemd integration

## Usage Patterns

### CLI Usage
- `python main.py tunnel add --vni 100 --local-ip 192.0.2.1 --remote-ip 198.51.100.1`
- `python main.py tunnel list --format table`
- `python main.py topology create --type hub-spoke --config examples/hub-spoke.yaml`

### API Usage
- Start API: `python main.py api`
- Access documentation: `http://localhost:8000/docs`
- Health check: `GET /health`
- Tunnel operations: `/api/v1/tunnels`

### System Service
- Install: `sudo ./scripts/install.sh`
- Control: `sudo systemctl start gind-vxlan`
- Monitor: `sudo journalctl -u gind-vxlan -f`

This project successfully implements all requirements from the original VxLAN specification document while providing a comprehensive, production-ready solution that operates independently of any specific platform.